// Package appconfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package appconfig

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	OAuth2AuthScopes = "OAuth2Auth.Scopes"
)

// Defines values for AzureCoreFoundationsOperationState.
const (
	AzureCoreFoundationsOperationStateCanceled   AzureCoreFoundationsOperationState = "Canceled"
	AzureCoreFoundationsOperationStateFailed     AzureCoreFoundationsOperationState = "Failed"
	AzureCoreFoundationsOperationStateNotStarted AzureCoreFoundationsOperationState = "NotStarted"
	AzureCoreFoundationsOperationStateRunning    AzureCoreFoundationsOperationState = "Running"
	AzureCoreFoundationsOperationStateSucceeded  AzureCoreFoundationsOperationState = "Succeeded"
)

// Defines values for CompositionTypex.
const (
	CompositionTypexKey      CompositionTypex = "key"
	CompositionTypexKeyLabel CompositionTypex = "key_label"
)

// Defines values for SnapshotStatus.
const (
	SnapshotStatusArchived     SnapshotStatus = "archived"
	SnapshotStatusFailed       SnapshotStatus = "failed"
	SnapshotStatusProvisioning SnapshotStatus = "provisioning"
	SnapshotStatusReady        SnapshotStatus = "ready"
)

// Defines values for GetKeyValuesParamsSelect.
const (
	GetKeyValuesParamsSelectContentType  GetKeyValuesParamsSelect = "content_type"
	GetKeyValuesParamsSelectEtag         GetKeyValuesParamsSelect = "etag"
	GetKeyValuesParamsSelectKey          GetKeyValuesParamsSelect = "key"
	GetKeyValuesParamsSelectLabel        GetKeyValuesParamsSelect = "label"
	GetKeyValuesParamsSelectLastModified GetKeyValuesParamsSelect = "last_modified"
	GetKeyValuesParamsSelectLocked       GetKeyValuesParamsSelect = "locked"
	GetKeyValuesParamsSelectTags         GetKeyValuesParamsSelect = "tags"
	GetKeyValuesParamsSelectValue        GetKeyValuesParamsSelect = "value"
)

// Defines values for CheckKeyValuesParamsSelect.
const (
	CheckKeyValuesParamsSelectContentType  CheckKeyValuesParamsSelect = "content_type"
	CheckKeyValuesParamsSelectEtag         CheckKeyValuesParamsSelect = "etag"
	CheckKeyValuesParamsSelectKey          CheckKeyValuesParamsSelect = "key"
	CheckKeyValuesParamsSelectLabel        CheckKeyValuesParamsSelect = "label"
	CheckKeyValuesParamsSelectLastModified CheckKeyValuesParamsSelect = "last_modified"
	CheckKeyValuesParamsSelectLocked       CheckKeyValuesParamsSelect = "locked"
	CheckKeyValuesParamsSelectTags         CheckKeyValuesParamsSelect = "tags"
	CheckKeyValuesParamsSelectValue        CheckKeyValuesParamsSelect = "value"
)

// Defines values for GetKeyValueParamsSelect.
const (
	GetKeyValueParamsSelectContentType  GetKeyValueParamsSelect = "content_type"
	GetKeyValueParamsSelectEtag         GetKeyValueParamsSelect = "etag"
	GetKeyValueParamsSelectKey          GetKeyValueParamsSelect = "key"
	GetKeyValueParamsSelectLabel        GetKeyValueParamsSelect = "label"
	GetKeyValueParamsSelectLastModified GetKeyValueParamsSelect = "last_modified"
	GetKeyValueParamsSelectLocked       GetKeyValueParamsSelect = "locked"
	GetKeyValueParamsSelectTags         GetKeyValueParamsSelect = "tags"
	GetKeyValueParamsSelectValue        GetKeyValueParamsSelect = "value"
)

// Defines values for CheckKeyValueParamsSelect.
const (
	CheckKeyValueParamsSelectContentType  CheckKeyValueParamsSelect = "content_type"
	CheckKeyValueParamsSelectEtag         CheckKeyValueParamsSelect = "etag"
	CheckKeyValueParamsSelectKey          CheckKeyValueParamsSelect = "key"
	CheckKeyValueParamsSelectLabel        CheckKeyValueParamsSelect = "label"
	CheckKeyValueParamsSelectLastModified CheckKeyValueParamsSelect = "last_modified"
	CheckKeyValueParamsSelectLocked       CheckKeyValueParamsSelect = "locked"
	CheckKeyValueParamsSelectTags         CheckKeyValueParamsSelect = "tags"
	CheckKeyValueParamsSelectValue        CheckKeyValueParamsSelect = "value"
)

// Defines values for GetLabelsParamsSelect.
const (
	GetLabelsParamsSelectName GetLabelsParamsSelect = "name"
)

// Defines values for CheckLabelsParamsSelect.
const (
	CheckLabelsParamsSelectName CheckLabelsParamsSelect = "name"
)

// Defines values for GetRevisionsParamsSelect.
const (
	GetRevisionsParamsSelectContentType  GetRevisionsParamsSelect = "content_type"
	GetRevisionsParamsSelectEtag         GetRevisionsParamsSelect = "etag"
	GetRevisionsParamsSelectKey          GetRevisionsParamsSelect = "key"
	GetRevisionsParamsSelectLabel        GetRevisionsParamsSelect = "label"
	GetRevisionsParamsSelectLastModified GetRevisionsParamsSelect = "last_modified"
	GetRevisionsParamsSelectLocked       GetRevisionsParamsSelect = "locked"
	GetRevisionsParamsSelectTags         GetRevisionsParamsSelect = "tags"
	GetRevisionsParamsSelectValue        GetRevisionsParamsSelect = "value"
)

// Defines values for CheckRevisionsParamsSelect.
const (
	CheckRevisionsParamsSelectContentType  CheckRevisionsParamsSelect = "content_type"
	CheckRevisionsParamsSelectEtag         CheckRevisionsParamsSelect = "etag"
	CheckRevisionsParamsSelectKey          CheckRevisionsParamsSelect = "key"
	CheckRevisionsParamsSelectLabel        CheckRevisionsParamsSelect = "label"
	CheckRevisionsParamsSelectLastModified CheckRevisionsParamsSelect = "last_modified"
	CheckRevisionsParamsSelectLocked       CheckRevisionsParamsSelect = "locked"
	CheckRevisionsParamsSelectTags         CheckRevisionsParamsSelect = "tags"
	CheckRevisionsParamsSelectValue        CheckRevisionsParamsSelect = "value"
)

// Defines values for GetSnapshotsParamsSelect.
const (
	GetSnapshotsParamsSelectCompositionType GetSnapshotsParamsSelect = "composition_type"
	GetSnapshotsParamsSelectCreated         GetSnapshotsParamsSelect = "created"
	GetSnapshotsParamsSelectEtag            GetSnapshotsParamsSelect = "etag"
	GetSnapshotsParamsSelectExpires         GetSnapshotsParamsSelect = "expires"
	GetSnapshotsParamsSelectFilters         GetSnapshotsParamsSelect = "filters"
	GetSnapshotsParamsSelectItemsCount      GetSnapshotsParamsSelect = "items_count"
	GetSnapshotsParamsSelectName            GetSnapshotsParamsSelect = "name"
	GetSnapshotsParamsSelectRetentionPeriod GetSnapshotsParamsSelect = "retention_period"
	GetSnapshotsParamsSelectSize            GetSnapshotsParamsSelect = "size"
	GetSnapshotsParamsSelectStatus          GetSnapshotsParamsSelect = "status"
	GetSnapshotsParamsSelectTags            GetSnapshotsParamsSelect = "tags"
)

// Defines values for GetSnapshotsParamsStatus.
const (
	Archived     GetSnapshotsParamsStatus = "archived"
	Failed       GetSnapshotsParamsStatus = "failed"
	Provisioning GetSnapshotsParamsStatus = "provisioning"
	Ready        GetSnapshotsParamsStatus = "ready"
)

// Defines values for GetSnapshotParamsSelect.
const (
	CompositionType GetSnapshotParamsSelect = "composition_type"
	Created         GetSnapshotParamsSelect = "created"
	Etag            GetSnapshotParamsSelect = "etag"
	Expires         GetSnapshotParamsSelect = "expires"
	Filters         GetSnapshotParamsSelect = "filters"
	ItemsCount      GetSnapshotParamsSelect = "items_count"
	Name            GetSnapshotParamsSelect = "name"
	RetentionPeriod GetSnapshotParamsSelect = "retention_period"
	Size            GetSnapshotParamsSelect = "size"
	Status          GetSnapshotParamsSelect = "status"
	Tags            GetSnapshotParamsSelect = "tags"
)

// AzureCoreFoundationsError The error object.
type AzureCoreFoundationsError struct {
	// Code One of a server-defined set of error codes.
	Code string `json:"code"`

	// Details An array of details about specific errors that led to this reported error.
	Details *[]AzureCoreFoundationsError `json:"details,omitempty"`

	// Innererror An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.
	Innererror *AzureCoreFoundationsInnerError `json:"innererror,omitempty"`

	// Message A human-readable representation of the error.
	Message string `json:"message"`

	// Target The target of the error.
	Target *string `json:"target,omitempty"`
}

// AzureCoreFoundationsInnerError An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.
type AzureCoreFoundationsInnerError struct {
	// Code One of a server-defined set of error codes.
	Code *string `json:"code,omitempty"`

	// Innererror An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.
	Innererror *AzureCoreFoundationsInnerError `json:"innererror,omitempty"`
}

// AzureCoreFoundationsOperationState Enum describing allowed operation states.
type AzureCoreFoundationsOperationState string

// CompositionTypex Composition types.
type CompositionTypex string

// Error Azure App Configuration error object.
type Error struct {
	// Detail A detailed description of the error.
	Detail *string `json:"detail,omitempty"`

	// Name The name of the parameter that resulted in the error.
	Name *string `json:"name,omitempty"`

	// Status The HTTP status code that the error maps to.
	Status *int32 `json:"status,omitempty"`

	// Title A brief summary of the error.
	Title *string `json:"title,omitempty"`

	// Type The type of the error.
	Type *string `json:"type,omitempty"`
}

// Key Keys serve as identifiers for key-values and are used to store and retrieve corresponding values.
type Key struct {
	// Name The name of the key.
	Name *string `json:"name,omitempty"`
}

// KeyListResult The result of a list request.
type KeyListResult struct {
	// NextLink The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`

	// Items The collection value.
	Items *[]Key `json:"items,omitempty"`
}

// KeyValue A key-value pair representing application settings.
type KeyValue struct {
	// ContentType The content type of the value stored within the key-value.
	ContentType *string `json:"content_type,omitempty"`

	// Etag A value representing the current state of the resource.
	Etag *string `json:"etag,omitempty"`

	// Key The key of the key-value.
	Key *string `json:"key,omitempty"`

	// Label The label the key-value belongs to.
	Label *string `json:"label,omitempty"`

	// LastModified A date representing the last time the key-value was modified.
	LastModified *time.Time `json:"last_modified,omitempty"`

	// Locked Indicates whether the key-value is locked.
	Locked *bool `json:"locked,omitempty"`

	// Tags The tags of the key-value
	Tags *map[string]string `json:"tags,omitempty"`

	// Value The value of the key-value.
	Value *string `json:"value,omitempty"`
}

// KeyValueFilter Enables filtering of key-values. Syntax reference:
// https://aka.ms/azconfig/docs/restapisnapshots
type KeyValueFilter struct {
	// Key Filters key-values by their key field.
	Key string `json:"key"`

	// Label Filters key-values by their label field.
	Label *string `json:"label,omitempty"`

	// Tags Filters key-values by their tags field.
	Tags *[]string `json:"tags,omitempty"`
}

// KeyValueListResult The result of a list request.
type KeyValueListResult struct {
	// NextLink The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`

	// Etag An identifier representing the returned state of the resource.
	Etag *string `json:"etag,omitempty"`

	// Items The collection value.
	Items *[]KeyValue `json:"items,omitempty"`
}

// Label Labels are used to group key-values.
type Label struct {
	// Name The name of the label.
	Name *string `json:"name,omitempty"`
}

// LabelListResult The result of a list request.
type LabelListResult struct {
	// NextLink The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`

	// Items The collection value.
	Items *[]Label `json:"items,omitempty"`
}

// OperationDetails Details of a long running operation.
type OperationDetails struct {
	// Error The error object.
	Error *AzureCoreFoundationsError `json:"error,omitempty"`

	// Id The unique id of the operation.
	Id string `json:"id"`

	// Status Enum describing allowed operation states.
	Status AzureCoreFoundationsOperationState `json:"status"`
}

// Snapshot A snapshot is a named, immutable subset of an App Configuration store's key-values.
type Snapshot struct {
	// CompositionType Composition types.
	CompositionType *CompositionTypex `json:"composition_type,omitempty"`

	// Created The time that the snapshot was created.
	Created *time.Time `json:"created,omitempty"`

	// Etag A value representing the current state of the snapshot.
	Etag *string `json:"etag,omitempty"`

	// Expires The time that the snapshot will expire.
	Expires *time.Time `json:"expires,omitempty"`

	// Filters A list of filters used to filter the key-values included in the snapshot.
	Filters []KeyValueFilter `json:"filters"`

	// ItemsCount The amount of key-values in the snapshot.
	ItemsCount *int64 `json:"items_count,omitempty"`

	// Name The name of the snapshot.
	Name *string `json:"name,omitempty"`

	// RetentionPeriod The amount of time, in seconds, that a snapshot will remain in the archived
	// state before expiring. This property is only writable during the creation of a
	// snapshot. If not specified, the default lifetime of key-value revisions will be
	// used.
	RetentionPeriod *int64 `json:"retention_period,omitempty"`

	// Size The size in bytes of the snapshot.
	Size *int64 `json:"size,omitempty"`

	// Status Snapshot status.
	Status *SnapshotStatus `json:"status,omitempty"`

	// Tags The tags of the snapshot.
	Tags *map[string]string `json:"tags,omitempty"`
}

// SnapshotListResult The result of a snapshot list request.
type SnapshotListResult struct {
	// NextLink The URI that can be used to request the next set of paged results.
	NextLink *string `json:"@nextLink,omitempty"`

	// Items The collection value.
	Items *[]Snapshot `json:"items,omitempty"`
}

// SnapshotStatus Snapshot status.
type SnapshotStatus string

// SnapshotUpdateParameters Parameters used to update a snapshot.
type SnapshotUpdateParameters struct {
	// Status Snapshot status.
	Status *SnapshotStatus `json:"status,omitempty"`
}

// AzureCoreClientRequestIdHeader defines model for Azure.Core.ClientRequestIdHeader.
type AzureCoreClientRequestIdHeader = openapi_types.UUID

// AzureCoreFoundationsApiVersionParameter defines model for Azure.Core.Foundations.ApiVersionParameter.
type AzureCoreFoundationsApiVersionParameter = string

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Name A filter for the name of the returned keys.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`
}

// CheckKeysParams defines parameters for CheckKeys.
type CheckKeysParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Name A filter for the name of the returned keys.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetKeyValuesParams defines parameters for GetKeyValues.
type GetKeyValuesParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Key A filter used to match keys. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Label A filter used to match labels. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]GetKeyValuesParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Snapshot A filter used get key-values for a snapshot. The value should be the name of
	// the snapshot. Not valid when used with 'key' and 'label' filters.
	Snapshot *string `form:"snapshot,omitempty" json:"snapshot,omitempty"`

	// Tags A filter used to query by tags. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`
}

// GetKeyValuesParamsSelect defines parameters for GetKeyValues.
type GetKeyValuesParamsSelect string

// CheckKeyValuesParams defines parameters for CheckKeyValues.
type CheckKeyValuesParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Key A filter used to match keys. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Label A filter used to match labels. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]CheckKeyValuesParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Snapshot A filter used get key-values for a snapshot. The value should be the name of
	// the snapshot. Not valid when used with 'key' and 'label' filters.
	Snapshot *string `form:"snapshot,omitempty" json:"snapshot,omitempty"`

	// Tags A filter used to query by tags. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// CheckKeyValuesParamsSelect defines parameters for CheckKeyValues.
type CheckKeyValuesParamsSelect string

// DeleteKeyValueParams defines parameters for DeleteKeyValue.
type DeleteKeyValueParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Label The label of the key-value to delete.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetKeyValueParams defines parameters for GetKeyValue.
type GetKeyValueParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Label The label of the key-value to retrieve.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]GetKeyValueParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Tags A filter used to query by tags. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetKeyValueParamsSelect defines parameters for GetKeyValue.
type GetKeyValueParamsSelect string

// CheckKeyValueParams defines parameters for CheckKeyValue.
type CheckKeyValueParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Label The label of the key-value to retrieve.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]CheckKeyValueParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Tags A filter used to query by tags. Syntax reference:
	// https://aka.ms/azconfig/docs/keyvaluefiltering
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// CheckKeyValueParamsSelect defines parameters for CheckKeyValue.
type CheckKeyValueParamsSelect string

// PutKeyValueParams defines parameters for PutKeyValue.
type PutKeyValueParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Label The label of the key-value to create.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetLabelsParams defines parameters for GetLabels.
type GetLabelsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Name A filter for the name of the returned labels.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]GetLabelsParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetLabelsParamsSelect defines parameters for GetLabels.
type GetLabelsParamsSelect string

// CheckLabelsParams defines parameters for CheckLabels.
type CheckLabelsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Name A filter for the name of the returned labels.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]CheckLabelsParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// CheckLabelsParamsSelect defines parameters for CheckLabels.
type CheckLabelsParamsSelect string

// DeleteLockParams defines parameters for DeleteLock.
type DeleteLockParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Label The label, if any, of the key-value to unlock.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// PutLockParams defines parameters for PutLock.
type PutLockParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Label The label, if any, of the key-value to lock.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetOperationDetailsParams defines parameters for GetOperationDetails.
type GetOperationDetailsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Snapshot Snapshot identifier for the long running operation.
	Snapshot string `form:"snapshot" json:"snapshot"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetRevisionsParams defines parameters for GetRevisions.
type GetRevisionsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Key A filter used to match keys. Syntax reference:
	// https://aka.ms/azconfig/docs/restapirevisions
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Label A filter used to match labels. Syntax reference:
	// https://aka.ms/azconfig/docs/restapirevisions
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]GetRevisionsParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Tags A filter used to query by tags. Syntax reference:
	// https://aka.ms/azconfig/docs/restapirevisions
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetRevisionsParamsSelect defines parameters for GetRevisions.
type GetRevisionsParamsSelect string

// CheckRevisionsParams defines parameters for CheckRevisions.
type CheckRevisionsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Key A filter used to match keys. Syntax reference:
	// https://aka.ms/azconfig/docs/restapirevisions
	Key *string `form:"key,omitempty" json:"key,omitempty"`

	// Label A filter used to match labels. Syntax reference:
	// https://aka.ms/azconfig/docs/restapirevisions
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]CheckRevisionsParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Tags A filter used to query by tags. Syntax reference:
	// https://aka.ms/azconfig/docs/restapirevisions
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// AcceptDatetime Requests the server to respond with the state of the resource at the specified
	// time.
	AcceptDatetime *string `json:"Accept-Datetime,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// CheckRevisionsParamsSelect defines parameters for CheckRevisions.
type CheckRevisionsParamsSelect string

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Name A filter for the name of the returned snapshots.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]GetSnapshotsParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// Status Used to filter returned snapshots by their status property.
	Status *[]GetSnapshotsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`
}

// GetSnapshotsParamsSelect defines parameters for GetSnapshots.
type GetSnapshotsParamsSelect string

// GetSnapshotsParamsStatus defines parameters for GetSnapshots.
type GetSnapshotsParamsStatus string

// CheckSnapshotsParams defines parameters for CheckSnapshots.
type CheckSnapshotsParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// After Instructs the server to return elements that appear after the element referred
	// to by the specified token.
	After *string `form:"After,omitempty" json:"After,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetSnapshotParams defines parameters for GetSnapshot.
type GetSnapshotParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// Select Used to select what fields are present in the returned resource(s).
	Select *[]GetSnapshotParamsSelect `form:"$Select,omitempty" json:"$Select,omitempty"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// GetSnapshotParamsSelect defines parameters for GetSnapshot.
type GetSnapshotParamsSelect string

// CheckSnapshotParams defines parameters for CheckSnapshot.
type CheckSnapshotParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// UpdateSnapshotParams defines parameters for UpdateSnapshot.
type UpdateSnapshotParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`

	// IfMatch Used to perform an operation only if the targeted resource's etag matches the
	// value provided.
	IfMatch *string `json:"If-Match,omitempty"`

	// IfNoneMatch Used to perform an operation only if the targeted resource's etag does not
	// match the value provided.
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// XMsClientRequestId An opaque, globally-unique, client-generated string identifier for the request.
	XMsClientRequestId *AzureCoreClientRequestIdHeader `json:"x-ms-client-request-id,omitempty"`
}

// CreateSnapshotParams defines parameters for CreateSnapshot.
type CreateSnapshotParams struct {
	// ApiVersion The API version to use for this operation.
	ApiVersion AzureCoreFoundationsApiVersionParameter `form:"api-version" json:"api-version"`

	// SyncToken Used to guarantee real-time consistency between requests.
	SyncToken *string `json:"Sync-Token,omitempty"`
}

// PutKeyValueApplicationWildcardPlusJSONRequestBody defines body for PutKeyValue for application/*+json ContentType.
type PutKeyValueApplicationWildcardPlusJSONRequestBody = KeyValue

// PutKeyValueJSONRequestBody defines body for PutKeyValue for application/json ContentType.
type PutKeyValueJSONRequestBody = KeyValue

// PutKeyValueApplicationJSONPatchPlusJSONRequestBody defines body for PutKeyValue for application/json-patch+json ContentType.
type PutKeyValueApplicationJSONPatchPlusJSONRequestBody = KeyValue

// PutKeyValueApplicationVndMicrosoftAppconfigKvPlusJSONRequestBody defines body for PutKeyValue for application/vnd.microsoft.appconfig.kv+json ContentType.
type PutKeyValueApplicationVndMicrosoftAppconfigKvPlusJSONRequestBody = KeyValue

// PutKeyValueApplicationVndMicrosoftAppconfigKvsetPlusJSONRequestBody defines body for PutKeyValue for application/vnd.microsoft.appconfig.kvset+json ContentType.
type PutKeyValueApplicationVndMicrosoftAppconfigKvsetPlusJSONRequestBody = KeyValue

// UpdateSnapshotJSONRequestBody defines body for UpdateSnapshot for application/json ContentType.
type UpdateSnapshotJSONRequestBody = SnapshotUpdateParameters

// UpdateSnapshotApplicationMergePatchPlusJSONRequestBody defines body for UpdateSnapshot for application/merge-patch+json ContentType.
type UpdateSnapshotApplicationMergePatchPlusJSONRequestBody = SnapshotUpdateParameters

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = Snapshot

// CreateSnapshotApplicationVndMicrosoftAppconfigSnapshotPlusJSONRequestBody defines body for CreateSnapshot for application/vnd.microsoft.appconfig.snapshot+json ContentType.
type CreateSnapshotApplicationVndMicrosoftAppconfigSnapshotPlusJSONRequestBody = Snapshot

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets a list of keys.
	// (GET /keys)
	GetKeys(c *gin.Context, params GetKeysParams)
	// Requests the headers and status of the given resource.
	// (HEAD /keys)
	CheckKeys(c *gin.Context, params CheckKeysParams)
	// Gets a list of key-values.
	// (GET /kv)
	GetKeyValues(c *gin.Context, params GetKeyValuesParams)
	// Requests the headers and status of the given resource.
	// (HEAD /kv)
	CheckKeyValues(c *gin.Context, params CheckKeyValuesParams)
	// Deletes a key-value.
	// (DELETE /kv/{key})
	DeleteKeyValue(c *gin.Context, key string, params DeleteKeyValueParams)
	// Gets a single key-value.
	// (GET /kv/{key})
	GetKeyValue(c *gin.Context, key string, params GetKeyValueParams)
	// Requests the headers and status of the given resource.
	// (HEAD /kv/{key})
	CheckKeyValue(c *gin.Context, key string, params CheckKeyValueParams)
	// Creates a key-value.
	// (PUT /kv/{key})
	PutKeyValue(c *gin.Context, key string, params PutKeyValueParams)
	// Gets a list of labels.
	// (GET /labels)
	GetLabels(c *gin.Context, params GetLabelsParams)
	// Requests the headers and status of the given resource.
	// (HEAD /labels)
	CheckLabels(c *gin.Context, params CheckLabelsParams)
	// Unlocks a key-value.
	// (DELETE /locks/{key})
	DeleteLock(c *gin.Context, key string, params DeleteLockParams)
	// Locks a key-value.
	// (PUT /locks/{key})
	PutLock(c *gin.Context, key string, params PutLockParams)
	// Gets the state of a long running operation.
	// (GET /operations)
	GetOperationDetails(c *gin.Context, params GetOperationDetailsParams)
	// Gets a list of key-value revisions.
	// (GET /revisions)
	GetRevisions(c *gin.Context, params GetRevisionsParams)
	// Requests the headers and status of the given resource.
	// (HEAD /revisions)
	CheckRevisions(c *gin.Context, params CheckRevisionsParams)
	// Gets a list of key-value snapshots.
	// (GET /snapshots)
	GetSnapshots(c *gin.Context, params GetSnapshotsParams)
	// Requests the headers and status of the given resource.
	// (HEAD /snapshots)
	CheckSnapshots(c *gin.Context, params CheckSnapshotsParams)
	// Gets a single key-value snapshot.
	// (GET /snapshots/{name})
	GetSnapshot(c *gin.Context, name string, params GetSnapshotParams)
	// Requests the headers and status of the given resource.
	// (HEAD /snapshots/{name})
	CheckSnapshot(c *gin.Context, name string, params CheckSnapshotParams)
	// Updates the state of a key-value snapshot.
	// (PATCH /snapshots/{name})
	UpdateSnapshot(c *gin.Context, name string, params UpdateSnapshotParams)
	// Creates a key-value snapshot.
	// (PUT /snapshots/{name})
	CreateSnapshot(c *gin.Context, name string, params CreateSnapshotParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetKeys(c, params)
}

// CheckKeys operation middleware
func (siw *ServerInterfaceWrapper) CheckKeys(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckKeysParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckKeys(c, params)
}

// GetKeyValues operation middleware
func (siw *ServerInterfaceWrapper) GetKeyValues(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyValuesParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snapshot" -------------

	err = runtime.BindQueryParameter("form", true, false, "snapshot", c.Request.URL.Query(), &params.Snapshot)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter snapshot: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetKeyValues(c, params)
}

// CheckKeyValues operation middleware
func (siw *ServerInterfaceWrapper) CheckKeyValues(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckKeyValuesParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snapshot" -------------

	err = runtime.BindQueryParameter("form", true, false, "snapshot", c.Request.URL.Query(), &params.Snapshot)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter snapshot: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckKeyValues(c, params)
}

// DeleteKeyValue operation middleware
func (siw *ServerInterfaceWrapper) DeleteKeyValue(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteKeyValueParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteKeyValue(c, key, params)
}

// GetKeyValue operation middleware
func (siw *ServerInterfaceWrapper) GetKeyValue(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyValueParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetKeyValue(c, key, params)
}

// CheckKeyValue operation middleware
func (siw *ServerInterfaceWrapper) CheckKeyValue(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckKeyValueParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckKeyValue(c, key, params)
}

// PutKeyValue operation middleware
func (siw *ServerInterfaceWrapper) PutKeyValue(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutKeyValueParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutKeyValue(c, key, params)
}

// GetLabels operation middleware
func (siw *ServerInterfaceWrapper) GetLabels(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLabelsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLabels(c, params)
}

// CheckLabels operation middleware
func (siw *ServerInterfaceWrapper) CheckLabels(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckLabelsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckLabels(c, params)
}

// DeleteLock operation middleware
func (siw *ServerInterfaceWrapper) DeleteLock(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLockParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteLock(c, key, params)
}

// PutLock operation middleware
func (siw *ServerInterfaceWrapper) PutLock(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutLockParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutLock(c, key, params)
}

// GetOperationDetails operation middleware
func (siw *ServerInterfaceWrapper) GetOperationDetails(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOperationDetailsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "snapshot" -------------

	if paramValue := c.Query("snapshot"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument snapshot is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "snapshot", c.Request.URL.Query(), &params.Snapshot)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter snapshot: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOperationDetails(c, params)
}

// GetRevisions operation middleware
func (siw *ServerInterfaceWrapper) GetRevisions(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRevisionsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRevisions(c, params)
}

// CheckRevisions operation middleware
func (siw *ServerInterfaceWrapper) CheckRevisions(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckRevisionsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "key" -------------

	err = runtime.BindQueryParameter("form", true, false, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", c.Request.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter label: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "Accept-Datetime" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Datetime")]; found {
		var AcceptDatetime string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Datetime, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Datetime", valueList[0], &AcceptDatetime, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Datetime: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptDatetime = &AcceptDatetime

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckRevisions(c, params)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshots(c, params)
}

// CheckSnapshots operation middleware
func (siw *ServerInterfaceWrapper) CheckSnapshots(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckSnapshotsParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "After" -------------

	err = runtime.BindQueryParameter("form", true, false, "After", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter After: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckSnapshots(c, params)
}

// GetSnapshot operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "$Select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$Select", c.Request.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter $Select: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSnapshot(c, name, params)
}

// CheckSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CheckSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckSnapshotParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckSnapshot(c, name, params)
}

// UpdateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) UpdateSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateSnapshotParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Match", valueList[0], &IfMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfMatch = &IfMatch

	}

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "x-ms-client-request-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-ms-client-request-id")]; found {
		var XMsClientRequestId AzureCoreClientRequestIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for x-ms-client-request-id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "x-ms-client-request-id", valueList[0], &XMsClientRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter x-ms-client-request-id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRequestId = &XMsClientRequestId

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSnapshot(c, name, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	c.Set(OAuth2AuthScopes, []string{"https://azconfig.io/.default"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSnapshotParams

	// ------------- Required query parameter "api-version" -------------

	if paramValue := c.Query("api-version"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument api-version is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "api-version", c.Request.URL.Query(), &params.ApiVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter api-version: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "Sync-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Sync-Token")]; found {
		var SyncToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Sync-Token, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Sync-Token", valueList[0], &SyncToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Sync-Token: %w", err), http.StatusBadRequest)
			return
		}

		params.SyncToken = &SyncToken

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSnapshot(c, name, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/keys", wrapper.GetKeys)
	router.HEAD(options.BaseURL+"/keys", wrapper.CheckKeys)
	router.GET(options.BaseURL+"/kv", wrapper.GetKeyValues)
	router.HEAD(options.BaseURL+"/kv", wrapper.CheckKeyValues)
	router.DELETE(options.BaseURL+"/kv/:key", wrapper.DeleteKeyValue)
	router.GET(options.BaseURL+"/kv/:key", wrapper.GetKeyValue)
	router.HEAD(options.BaseURL+"/kv/:key", wrapper.CheckKeyValue)
	router.PUT(options.BaseURL+"/kv/:key", wrapper.PutKeyValue)
	router.GET(options.BaseURL+"/labels", wrapper.GetLabels)
	router.HEAD(options.BaseURL+"/labels", wrapper.CheckLabels)
	router.DELETE(options.BaseURL+"/locks/:key", wrapper.DeleteLock)
	router.PUT(options.BaseURL+"/locks/:key", wrapper.PutLock)
	router.GET(options.BaseURL+"/operations", wrapper.GetOperationDetails)
	router.GET(options.BaseURL+"/revisions", wrapper.GetRevisions)
	router.HEAD(options.BaseURL+"/revisions", wrapper.CheckRevisions)
	router.GET(options.BaseURL+"/snapshots", wrapper.GetSnapshots)
	router.HEAD(options.BaseURL+"/snapshots", wrapper.CheckSnapshots)
	router.GET(options.BaseURL+"/snapshots/:name", wrapper.GetSnapshot)
	router.HEAD(options.BaseURL+"/snapshots/:name", wrapper.CheckSnapshot)
	router.PATCH(options.BaseURL+"/snapshots/:name", wrapper.UpdateSnapshot)
	router.PUT(options.BaseURL+"/snapshots/:name", wrapper.CreateSnapshot)
}

type GetKeysRequestObject struct {
	Params GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(w http.ResponseWriter) error
}

type GetKeys200ResponseHeaders struct {
	SyncToken string
}

type GetKeys200JSONResponse struct {
	Body    KeyListResult
	Headers GetKeys200ResponseHeaders
}

func (response GetKeys200JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeys200ApplicationProblemPlusJSONResponse struct {
	Body    KeyListResult
	Headers GetKeys200ResponseHeaders
}

func (response GetKeys200ApplicationProblemPlusJSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeys200ApplicationVndMicrosoftAppconfigKeysetPlusJSONResponse struct {
	Body    KeyListResult
	Headers GetKeys200ResponseHeaders
}

func (response GetKeys200ApplicationVndMicrosoftAppconfigKeysetPlusJSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.keyset+json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeysdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeysdefaultJSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeysdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeysdefaultApplicationProblemPlusJSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeysdefaultApplicationVndMicrosoftAppconfigKeysetPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeysdefaultApplicationVndMicrosoftAppconfigKeysetPlusJSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.keyset+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckKeysRequestObject struct {
	Params CheckKeysParams
}

type CheckKeysResponseObject interface {
	VisitCheckKeysResponse(w http.ResponseWriter) error
}

type CheckKeys200ResponseHeaders struct {
	SyncToken string
}

type CheckKeys200Response struct {
	Headers CheckKeys200ResponseHeaders
}

func (response CheckKeys200Response) VisitCheckKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckKeysdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckKeysdefaultJSONResponse) VisitCheckKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuesRequestObject struct {
	Params GetKeyValuesParams
}

type GetKeyValuesResponseObject interface {
	VisitGetKeyValuesResponse(w http.ResponseWriter) error
}

type GetKeyValues200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type GetKeyValues200JSONResponse struct {
	Body    KeyValueListResult
	Headers GetKeyValues200ResponseHeaders
}

func (response GetKeyValues200JSONResponse) VisitGetKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValues200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValueListResult
	Headers GetKeyValues200ResponseHeaders
}

func (response GetKeyValues200ApplicationProblemPlusJSONResponse) VisitGetKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValues200ApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse struct {
	Body    KeyValueListResult
	Headers GetKeyValues200ResponseHeaders
}

func (response GetKeyValues200ApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse) VisitGetKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kvset+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeyValuesdefaultJSONResponse) VisitGetKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuesdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeyValuesdefaultApplicationProblemPlusJSONResponse) VisitGetKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuesdefaultApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeyValuesdefaultApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse) VisitGetKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kvset+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckKeyValuesRequestObject struct {
	Params CheckKeyValuesParams
}

type CheckKeyValuesResponseObject interface {
	VisitCheckKeyValuesResponse(w http.ResponseWriter) error
}

type CheckKeyValues200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type CheckKeyValues200Response struct {
	Headers CheckKeyValues200ResponseHeaders
}

func (response CheckKeyValues200Response) VisitCheckKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckKeyValuesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckKeyValuesdefaultJSONResponse) VisitCheckKeyValuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteKeyValueRequestObject struct {
	Key    string `json:"key"`
	Params DeleteKeyValueParams
}

type DeleteKeyValueResponseObject interface {
	VisitDeleteKeyValueResponse(w http.ResponseWriter) error
}

type DeleteKeyValue200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type DeleteKeyValue200JSONResponse struct {
	Body    KeyValue
	Headers DeleteKeyValue200ResponseHeaders
}

func (response DeleteKeyValue200JSONResponse) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteKeyValue200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValue
	Headers DeleteKeyValue200ResponseHeaders
}

func (response DeleteKeyValue200ApplicationProblemPlusJSONResponse) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteKeyValue200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body    KeyValue
	Headers DeleteKeyValue200ResponseHeaders
}

func (response DeleteKeyValue200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteKeyValue204ResponseHeaders struct {
	SyncToken string
}

type DeleteKeyValue204Response struct {
	Headers DeleteKeyValue204ResponseHeaders
}

func (response DeleteKeyValue204Response) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(204)
	return nil
}

type DeleteKeyValuedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteKeyValuedefaultJSONResponse) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteKeyValuedefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteKeyValuedefaultApplicationProblemPlusJSONResponse) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteKeyValuedefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteKeyValuedefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValueRequestObject struct {
	Key    string `json:"key"`
	Params GetKeyValueParams
}

type GetKeyValueResponseObject interface {
	VisitGetKeyValueResponse(w http.ResponseWriter) error
}

type GetKeyValue200ResponseHeaders struct {
	ETag         string
	SyncToken    string
	XMsRequestId openapi_types.UUID
}

type GetKeyValue200JSONResponse struct {
	Body    KeyValue
	Headers GetKeyValue200ResponseHeaders
}

func (response GetKeyValue200JSONResponse) VisitGetKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.Header().Set("x-ms-request-id", fmt.Sprint(response.Headers.XMsRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValue200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValue
	Headers GetKeyValue200ResponseHeaders
}

func (response GetKeyValue200ApplicationProblemPlusJSONResponse) VisitGetKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.Header().Set("x-ms-request-id", fmt.Sprint(response.Headers.XMsRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValue200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body    KeyValue
	Headers GetKeyValue200ResponseHeaders
}

func (response GetKeyValue200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitGetKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.Header().Set("x-ms-request-id", fmt.Sprint(response.Headers.XMsRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeyValuedefaultJSONResponse) VisitGetKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuedefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeyValuedefaultApplicationProblemPlusJSONResponse) VisitGetKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetKeyValuedefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetKeyValuedefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitGetKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckKeyValueRequestObject struct {
	Key    string `json:"key"`
	Params CheckKeyValueParams
}

type CheckKeyValueResponseObject interface {
	VisitCheckKeyValueResponse(w http.ResponseWriter) error
}

type CheckKeyValue200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type CheckKeyValue200Response struct {
	Headers CheckKeyValue200ResponseHeaders
}

func (response CheckKeyValue200Response) VisitCheckKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckKeyValuedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckKeyValuedefaultJSONResponse) VisitCheckKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutKeyValueRequestObject struct {
	Key                                               string `json:"key"`
	Params                                            PutKeyValueParams
	ContentType                                       string
	ApplicationWildcardPlusJSONBody                   *PutKeyValueApplicationWildcardPlusJSONRequestBody
	JSONBody                                          *PutKeyValueJSONRequestBody
	ApplicationJSONPatchPlusJSONBody                  *PutKeyValueApplicationJSONPatchPlusJSONRequestBody
	ApplicationVndMicrosoftAppconfigKvPlusJSONBody    *PutKeyValueApplicationVndMicrosoftAppconfigKvPlusJSONRequestBody
	ApplicationVndMicrosoftAppconfigKvsetPlusJSONBody *PutKeyValueApplicationVndMicrosoftAppconfigKvsetPlusJSONRequestBody
	Body                                              io.Reader
}

type PutKeyValueResponseObject interface {
	VisitPutKeyValueResponse(w http.ResponseWriter) error
}

type PutKeyValue200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type PutKeyValue200JSONResponse struct {
	Body    KeyValue
	Headers PutKeyValue200ResponseHeaders
}

func (response PutKeyValue200JSONResponse) VisitPutKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutKeyValue200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValue
	Headers PutKeyValue200ResponseHeaders
}

func (response PutKeyValue200ApplicationProblemPlusJSONResponse) VisitPutKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutKeyValue200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body    KeyValue
	Headers PutKeyValue200ResponseHeaders
}

func (response PutKeyValue200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitPutKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutKeyValuedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutKeyValuedefaultJSONResponse) VisitPutKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutKeyValuedefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutKeyValuedefaultApplicationProblemPlusJSONResponse) VisitPutKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutKeyValuedefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutKeyValuedefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitPutKeyValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLabelsRequestObject struct {
	Params GetLabelsParams
}

type GetLabelsResponseObject interface {
	VisitGetLabelsResponse(w http.ResponseWriter) error
}

type GetLabels200ResponseHeaders struct {
	SyncToken string
}

type GetLabels200JSONResponse struct {
	Body    LabelListResult
	Headers GetLabels200ResponseHeaders
}

func (response GetLabels200JSONResponse) VisitGetLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLabels200ApplicationProblemPlusJSONResponse struct {
	Body    LabelListResult
	Headers GetLabels200ResponseHeaders
}

func (response GetLabels200ApplicationProblemPlusJSONResponse) VisitGetLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLabels200ApplicationVndMicrosoftAppconfigLabelsetPlusJSONResponse struct {
	Body    LabelListResult
	Headers GetLabels200ResponseHeaders
}

func (response GetLabels200ApplicationVndMicrosoftAppconfigLabelsetPlusJSONResponse) VisitGetLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.labelset+json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLabelsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetLabelsdefaultJSONResponse) VisitGetLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLabelsdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetLabelsdefaultApplicationProblemPlusJSONResponse) VisitGetLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLabelsdefaultApplicationVndMicrosoftAppconfigLabelsetPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetLabelsdefaultApplicationVndMicrosoftAppconfigLabelsetPlusJSONResponse) VisitGetLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.labelset+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckLabelsRequestObject struct {
	Params CheckLabelsParams
}

type CheckLabelsResponseObject interface {
	VisitCheckLabelsResponse(w http.ResponseWriter) error
}

type CheckLabels200ResponseHeaders struct {
	SyncToken string
}

type CheckLabels200Response struct {
	Headers CheckLabels200ResponseHeaders
}

func (response CheckLabels200Response) VisitCheckLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckLabelsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckLabelsdefaultJSONResponse) VisitCheckLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteLockRequestObject struct {
	Key    string `json:"key"`
	Params DeleteLockParams
}

type DeleteLockResponseObject interface {
	VisitDeleteLockResponse(w http.ResponseWriter) error
}

type DeleteLock200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type DeleteLock200JSONResponse struct {
	Body    KeyValue
	Headers DeleteLock200ResponseHeaders
}

func (response DeleteLock200JSONResponse) VisitDeleteLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteLock200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValue
	Headers DeleteLock200ResponseHeaders
}

func (response DeleteLock200ApplicationProblemPlusJSONResponse) VisitDeleteLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteLock200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body    KeyValue
	Headers DeleteLock200ResponseHeaders
}

func (response DeleteLock200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitDeleteLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteLockdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteLockdefaultJSONResponse) VisitDeleteLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteLockdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteLockdefaultApplicationProblemPlusJSONResponse) VisitDeleteLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteLockdefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteLockdefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitDeleteLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutLockRequestObject struct {
	Key    string `json:"key"`
	Params PutLockParams
}

type PutLockResponseObject interface {
	VisitPutLockResponse(w http.ResponseWriter) error
}

type PutLock200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type PutLock200JSONResponse struct {
	Body    KeyValue
	Headers PutLock200ResponseHeaders
}

func (response PutLock200JSONResponse) VisitPutLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutLock200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValue
	Headers PutLock200ResponseHeaders
}

func (response PutLock200ApplicationProblemPlusJSONResponse) VisitPutLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutLock200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body    KeyValue
	Headers PutLock200ResponseHeaders
}

func (response PutLock200ApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitPutLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutLockdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutLockdefaultJSONResponse) VisitPutLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutLockdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutLockdefaultApplicationProblemPlusJSONResponse) VisitPutLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutLockdefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PutLockdefaultApplicationVndMicrosoftAppconfigKvPlusJSONResponse) VisitPutLockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kv+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetOperationDetailsRequestObject struct {
	Params GetOperationDetailsParams
}

type GetOperationDetailsResponseObject interface {
	VisitGetOperationDetailsResponse(w http.ResponseWriter) error
}

type GetOperationDetails200JSONResponse OperationDetails

func (response GetOperationDetails200JSONResponse) VisitGetOperationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOperationDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetOperationDetailsdefaultJSONResponse) VisitGetOperationDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRevisionsRequestObject struct {
	Params GetRevisionsParams
}

type GetRevisionsResponseObject interface {
	VisitGetRevisionsResponse(w http.ResponseWriter) error
}

type GetRevisions200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type GetRevisions200JSONResponse struct {
	Body    KeyValueListResult
	Headers GetRevisions200ResponseHeaders
}

func (response GetRevisions200JSONResponse) VisitGetRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRevisions200ApplicationProblemPlusJSONResponse struct {
	Body    KeyValueListResult
	Headers GetRevisions200ResponseHeaders
}

func (response GetRevisions200ApplicationProblemPlusJSONResponse) VisitGetRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRevisions200ApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse struct {
	Body    KeyValueListResult
	Headers GetRevisions200ResponseHeaders
}

func (response GetRevisions200ApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse) VisitGetRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kvset+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRevisionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRevisionsdefaultJSONResponse) VisitGetRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRevisionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRevisionsdefaultApplicationProblemPlusJSONResponse) VisitGetRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRevisionsdefaultApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRevisionsdefaultApplicationVndMicrosoftAppconfigKvsetPlusJSONResponse) VisitGetRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.kvset+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckRevisionsRequestObject struct {
	Params CheckRevisionsParams
}

type CheckRevisionsResponseObject interface {
	VisitCheckRevisionsResponse(w http.ResponseWriter) error
}

type CheckRevisions200ResponseHeaders struct {
	ETag      string
	SyncToken string
}

type CheckRevisions200Response struct {
	Headers CheckRevisions200ResponseHeaders
}

func (response CheckRevisions200Response) VisitCheckRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckRevisionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckRevisionsdefaultJSONResponse) VisitCheckRevisionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(w http.ResponseWriter) error
}

type GetSnapshots200ResponseHeaders struct {
	SyncToken string
}

type GetSnapshots200JSONResponse struct {
	Body    SnapshotListResult
	Headers GetSnapshots200ResponseHeaders
}

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshots200ApplicationProblemPlusJSONResponse struct {
	Body    SnapshotListResult
	Headers GetSnapshots200ResponseHeaders
}

func (response GetSnapshots200ApplicationProblemPlusJSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshots200ApplicationVndMicrosoftAppconfigSnapshotsetPlusJSONResponse struct {
	Body    SnapshotListResult
	Headers GetSnapshots200ResponseHeaders
}

func (response GetSnapshots200ApplicationVndMicrosoftAppconfigSnapshotsetPlusJSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshotset+json")
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSnapshotsdefaultJSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotsdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSnapshotsdefaultApplicationProblemPlusJSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotsdefaultApplicationVndMicrosoftAppconfigSnapshotsetPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSnapshotsdefaultApplicationVndMicrosoftAppconfigSnapshotsetPlusJSONResponse) VisitGetSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshotset+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckSnapshotsRequestObject struct {
	Params CheckSnapshotsParams
}

type CheckSnapshotsResponseObject interface {
	VisitCheckSnapshotsResponse(w http.ResponseWriter) error
}

type CheckSnapshots200ResponseHeaders struct {
	SyncToken string
}

type CheckSnapshots200Response struct {
	Headers CheckSnapshots200ResponseHeaders
}

func (response CheckSnapshots200Response) VisitCheckSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckSnapshotsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckSnapshotsdefaultJSONResponse) VisitCheckSnapshotsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotRequestObject struct {
	Name   string `json:"name"`
	Params GetSnapshotParams
}

type GetSnapshotResponseObject interface {
	VisitGetSnapshotResponse(w http.ResponseWriter) error
}

type GetSnapshot200ResponseHeaders struct {
	ETag         string
	Link         string
	SyncToken    string
	XMsRequestId openapi_types.UUID
}

type GetSnapshot200JSONResponse struct {
	Body    Snapshot
	Headers GetSnapshot200ResponseHeaders
}

func (response GetSnapshot200JSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.Header().Set("x-ms-request-id", fmt.Sprint(response.Headers.XMsRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshot200ApplicationProblemPlusJSONResponse struct {
	Body    Snapshot
	Headers GetSnapshot200ResponseHeaders
}

func (response GetSnapshot200ApplicationProblemPlusJSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.Header().Set("x-ms-request-id", fmt.Sprint(response.Headers.XMsRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshot200ApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse struct {
	Body    Snapshot
	Headers GetSnapshot200ResponseHeaders
}

func (response GetSnapshot200ApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshot+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.Header().Set("x-ms-request-id", fmt.Sprint(response.Headers.XMsRequestId))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSnapshotdefaultJSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSnapshotdefaultApplicationProblemPlusJSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSnapshotdefaultApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSnapshotdefaultApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse) VisitGetSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshot+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CheckSnapshotRequestObject struct {
	Name   string `json:"name"`
	Params CheckSnapshotParams
}

type CheckSnapshotResponseObject interface {
	VisitCheckSnapshotResponse(w http.ResponseWriter) error
}

type CheckSnapshot200ResponseHeaders struct {
	ETag      string
	Link      string
	SyncToken string
}

type CheckSnapshot200Response struct {
	Headers CheckSnapshot200ResponseHeaders
}

func (response CheckSnapshot200Response) VisitCheckSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)
	return nil
}

type CheckSnapshotdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CheckSnapshotdefaultJSONResponse) VisitCheckSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSnapshotRequestObject struct {
	Name                              string `json:"name"`
	Params                            UpdateSnapshotParams
	JSONBody                          *UpdateSnapshotJSONRequestBody
	ApplicationMergePatchPlusJSONBody *UpdateSnapshotApplicationMergePatchPlusJSONRequestBody
}

type UpdateSnapshotResponseObject interface {
	VisitUpdateSnapshotResponse(w http.ResponseWriter) error
}

type UpdateSnapshot200ResponseHeaders struct {
	ETag      string
	Link      string
	SyncToken string
}

type UpdateSnapshot200JSONResponse struct {
	Body    Snapshot
	Headers UpdateSnapshot200ResponseHeaders
}

func (response UpdateSnapshot200JSONResponse) VisitUpdateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSnapshot200ApplicationProblemPlusJSONResponse struct {
	Body    Snapshot
	Headers UpdateSnapshot200ResponseHeaders
}

func (response UpdateSnapshot200ApplicationProblemPlusJSONResponse) VisitUpdateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSnapshot200ApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse struct {
	Body    Snapshot
	Headers UpdateSnapshot200ResponseHeaders
}

func (response UpdateSnapshot200ApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse) VisitUpdateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshot+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSnapshotdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSnapshotdefaultJSONResponse) VisitUpdateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSnapshotdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSnapshotdefaultApplicationProblemPlusJSONResponse) VisitUpdateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSnapshotdefaultApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSnapshotdefaultApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse) VisitUpdateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshot+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSnapshotRequestObject struct {
	Name                                                 string `json:"name"`
	Params                                               CreateSnapshotParams
	JSONBody                                             *CreateSnapshotJSONRequestBody
	ApplicationVndMicrosoftAppconfigSnapshotPlusJSONBody *CreateSnapshotApplicationVndMicrosoftAppconfigSnapshotPlusJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(w http.ResponseWriter) error
}

type CreateSnapshot201ResponseHeaders struct {
	ETag              string
	Link              string
	OperationLocation string
	SyncToken         string
}

type CreateSnapshot201JSONResponse struct {
	Body    Snapshot
	Headers CreateSnapshot201ResponseHeaders
}

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Operation-Location", fmt.Sprint(response.Headers.OperationLocation))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSnapshot201ApplicationProblemPlusJSONResponse struct {
	Body    Snapshot
	Headers CreateSnapshot201ResponseHeaders
}

func (response CreateSnapshot201ApplicationProblemPlusJSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Operation-Location", fmt.Sprint(response.Headers.OperationLocation))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSnapshot201ApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse struct {
	Body    Snapshot
	Headers CreateSnapshot201ResponseHeaders
}

func (response CreateSnapshot201ApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshot+json")
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.Header().Set("Operation-Location", fmt.Sprint(response.Headers.OperationLocation))
	w.Header().Set("Sync-Token", fmt.Sprint(response.Headers.SyncToken))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSnapshotdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateSnapshotdefaultJSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSnapshotdefaultApplicationProblemPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateSnapshotdefaultApplicationProblemPlusJSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSnapshotdefaultApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateSnapshotdefaultApplicationVndMicrosoftAppconfigSnapshotPlusJSONResponse) VisitCreateSnapshotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/vnd.microsoft.appconfig.snapshot+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Gets a list of keys.
	// (GET /keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /keys)
	CheckKeys(ctx context.Context, request CheckKeysRequestObject) (CheckKeysResponseObject, error)
	// Gets a list of key-values.
	// (GET /kv)
	GetKeyValues(ctx context.Context, request GetKeyValuesRequestObject) (GetKeyValuesResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /kv)
	CheckKeyValues(ctx context.Context, request CheckKeyValuesRequestObject) (CheckKeyValuesResponseObject, error)
	// Deletes a key-value.
	// (DELETE /kv/{key})
	DeleteKeyValue(ctx context.Context, request DeleteKeyValueRequestObject) (DeleteKeyValueResponseObject, error)
	// Gets a single key-value.
	// (GET /kv/{key})
	GetKeyValue(ctx context.Context, request GetKeyValueRequestObject) (GetKeyValueResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /kv/{key})
	CheckKeyValue(ctx context.Context, request CheckKeyValueRequestObject) (CheckKeyValueResponseObject, error)
	// Creates a key-value.
	// (PUT /kv/{key})
	PutKeyValue(ctx context.Context, request PutKeyValueRequestObject) (PutKeyValueResponseObject, error)
	// Gets a list of labels.
	// (GET /labels)
	GetLabels(ctx context.Context, request GetLabelsRequestObject) (GetLabelsResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /labels)
	CheckLabels(ctx context.Context, request CheckLabelsRequestObject) (CheckLabelsResponseObject, error)
	// Unlocks a key-value.
	// (DELETE /locks/{key})
	DeleteLock(ctx context.Context, request DeleteLockRequestObject) (DeleteLockResponseObject, error)
	// Locks a key-value.
	// (PUT /locks/{key})
	PutLock(ctx context.Context, request PutLockRequestObject) (PutLockResponseObject, error)
	// Gets the state of a long running operation.
	// (GET /operations)
	GetOperationDetails(ctx context.Context, request GetOperationDetailsRequestObject) (GetOperationDetailsResponseObject, error)
	// Gets a list of key-value revisions.
	// (GET /revisions)
	GetRevisions(ctx context.Context, request GetRevisionsRequestObject) (GetRevisionsResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /revisions)
	CheckRevisions(ctx context.Context, request CheckRevisionsRequestObject) (CheckRevisionsResponseObject, error)
	// Gets a list of key-value snapshots.
	// (GET /snapshots)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /snapshots)
	CheckSnapshots(ctx context.Context, request CheckSnapshotsRequestObject) (CheckSnapshotsResponseObject, error)
	// Gets a single key-value snapshot.
	// (GET /snapshots/{name})
	GetSnapshot(ctx context.Context, request GetSnapshotRequestObject) (GetSnapshotResponseObject, error)
	// Requests the headers and status of the given resource.
	// (HEAD /snapshots/{name})
	CheckSnapshot(ctx context.Context, request CheckSnapshotRequestObject) (CheckSnapshotResponseObject, error)
	// Updates the state of a key-value snapshot.
	// (PATCH /snapshots/{name})
	UpdateSnapshot(ctx context.Context, request UpdateSnapshotRequestObject) (UpdateSnapshotResponseObject, error)
	// Creates a key-value snapshot.
	// (PUT /snapshots/{name})
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(ctx *gin.Context, params GetKeysParams) {
	var request GetKeysRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx, request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckKeys operation middleware
func (sh *strictHandler) CheckKeys(ctx *gin.Context, params CheckKeysParams) {
	var request CheckKeysRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckKeys(ctx, request.(CheckKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckKeysResponseObject); ok {
		if err := validResponse.VisitCheckKeysResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyValues operation middleware
func (sh *strictHandler) GetKeyValues(ctx *gin.Context, params GetKeyValuesParams) {
	var request GetKeyValuesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyValues(ctx, request.(GetKeyValuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyValues")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetKeyValuesResponseObject); ok {
		if err := validResponse.VisitGetKeyValuesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckKeyValues operation middleware
func (sh *strictHandler) CheckKeyValues(ctx *gin.Context, params CheckKeyValuesParams) {
	var request CheckKeyValuesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckKeyValues(ctx, request.(CheckKeyValuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckKeyValues")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckKeyValuesResponseObject); ok {
		if err := validResponse.VisitCheckKeyValuesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteKeyValue operation middleware
func (sh *strictHandler) DeleteKeyValue(ctx *gin.Context, key string, params DeleteKeyValueParams) {
	var request DeleteKeyValueRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteKeyValue(ctx, request.(DeleteKeyValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteKeyValue")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteKeyValueResponseObject); ok {
		if err := validResponse.VisitDeleteKeyValueResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeyValue operation middleware
func (sh *strictHandler) GetKeyValue(ctx *gin.Context, key string, params GetKeyValueParams) {
	var request GetKeyValueRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeyValue(ctx, request.(GetKeyValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeyValue")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetKeyValueResponseObject); ok {
		if err := validResponse.VisitGetKeyValueResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckKeyValue operation middleware
func (sh *strictHandler) CheckKeyValue(ctx *gin.Context, key string, params CheckKeyValueParams) {
	var request CheckKeyValueRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckKeyValue(ctx, request.(CheckKeyValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckKeyValue")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckKeyValueResponseObject); ok {
		if err := validResponse.VisitCheckKeyValueResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutKeyValue operation middleware
func (sh *strictHandler) PutKeyValue(ctx *gin.Context, key string, params PutKeyValueParams) {
	var request PutKeyValueRequestObject

	request.Key = key
	request.Params = params
	request.ContentType = ctx.ContentType()
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/*+json") {

		var body PutKeyValueApplicationWildcardPlusJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.ApplicationWildcardPlusJSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body PutKeyValueJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json-patch+json") {

		var body PutKeyValueApplicationJSONPatchPlusJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.ApplicationJSONPatchPlusJSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/vnd.microsoft.appconfig.kv+json") {

		var body PutKeyValueApplicationVndMicrosoftAppconfigKvPlusJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.ApplicationVndMicrosoftAppconfigKvPlusJSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/vnd.microsoft.appconfig.kvset+json") {

		var body PutKeyValueApplicationVndMicrosoftAppconfigKvsetPlusJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.ApplicationVndMicrosoftAppconfigKvsetPlusJSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "text/json") {
		request.Body = ctx.Request.Body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutKeyValue(ctx, request.(PutKeyValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutKeyValue")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutKeyValueResponseObject); ok {
		if err := validResponse.VisitPutKeyValueResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLabels operation middleware
func (sh *strictHandler) GetLabels(ctx *gin.Context, params GetLabelsParams) {
	var request GetLabelsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLabels(ctx, request.(GetLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLabels")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLabelsResponseObject); ok {
		if err := validResponse.VisitGetLabelsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckLabels operation middleware
func (sh *strictHandler) CheckLabels(ctx *gin.Context, params CheckLabelsParams) {
	var request CheckLabelsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckLabels(ctx, request.(CheckLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckLabels")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckLabelsResponseObject); ok {
		if err := validResponse.VisitCheckLabelsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteLock operation middleware
func (sh *strictHandler) DeleteLock(ctx *gin.Context, key string, params DeleteLockParams) {
	var request DeleteLockRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLock(ctx, request.(DeleteLockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLock")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteLockResponseObject); ok {
		if err := validResponse.VisitDeleteLockResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutLock operation middleware
func (sh *strictHandler) PutLock(ctx *gin.Context, key string, params PutLockParams) {
	var request PutLockRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutLock(ctx, request.(PutLockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutLock")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutLockResponseObject); ok {
		if err := validResponse.VisitPutLockResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOperationDetails operation middleware
func (sh *strictHandler) GetOperationDetails(ctx *gin.Context, params GetOperationDetailsParams) {
	var request GetOperationDetailsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperationDetails(ctx, request.(GetOperationDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperationDetails")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOperationDetailsResponseObject); ok {
		if err := validResponse.VisitGetOperationDetailsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRevisions operation middleware
func (sh *strictHandler) GetRevisions(ctx *gin.Context, params GetRevisionsParams) {
	var request GetRevisionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRevisions(ctx, request.(GetRevisionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRevisions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRevisionsResponseObject); ok {
		if err := validResponse.VisitGetRevisionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckRevisions operation middleware
func (sh *strictHandler) CheckRevisions(ctx *gin.Context, params CheckRevisionsParams) {
	var request CheckRevisionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckRevisions(ctx, request.(CheckRevisionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckRevisions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckRevisionsResponseObject); ok {
		if err := validResponse.VisitCheckRevisionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *gin.Context, params GetSnapshotsParams) {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx, request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckSnapshots operation middleware
func (sh *strictHandler) CheckSnapshots(ctx *gin.Context, params CheckSnapshotsParams) {
	var request CheckSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckSnapshots(ctx, request.(CheckSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckSnapshotsResponseObject); ok {
		if err := validResponse.VisitCheckSnapshotsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSnapshot operation middleware
func (sh *strictHandler) GetSnapshot(ctx *gin.Context, name string, params GetSnapshotParams) {
	var request GetSnapshotRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshot(ctx, request.(GetSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSnapshotResponseObject); ok {
		if err := validResponse.VisitGetSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckSnapshot operation middleware
func (sh *strictHandler) CheckSnapshot(ctx *gin.Context, name string, params CheckSnapshotParams) {
	var request CheckSnapshotRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckSnapshot(ctx, request.(CheckSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckSnapshotResponseObject); ok {
		if err := validResponse.VisitCheckSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSnapshot operation middleware
func (sh *strictHandler) UpdateSnapshot(ctx *gin.Context, name string, params UpdateSnapshotParams) {
	var request UpdateSnapshotRequestObject

	request.Name = name
	request.Params = params
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body UpdateSnapshotJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/merge-patch+json") {

		var body UpdateSnapshotApplicationMergePatchPlusJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.ApplicationMergePatchPlusJSONBody = &body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSnapshot(ctx, request.(UpdateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSnapshotResponseObject); ok {
		if err := validResponse.VisitUpdateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *gin.Context, name string, params CreateSnapshotParams) {
	var request CreateSnapshotRequestObject

	request.Name = name
	request.Params = params
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body CreateSnapshotJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/vnd.microsoft.appconfig.snapshot+json") {

		var body CreateSnapshotApplicationVndMicrosoftAppconfigSnapshotPlusJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.ApplicationVndMicrosoftAppconfigSnapshotPlusJSONBody = &body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx, request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
